<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo配置到阿里云</title>
      <link href="/post/6cb8.html"/>
      <url>/post/6cb8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo配置到阿里云上"><a href="#Hexo配置到阿里云上" class="headerlink" title="Hexo配置到阿里云上"></a>Hexo配置到阿里云上</h1><blockquote><p>相关博客的借鉴<br><a href="https://blog.csdn.net/NoCortY/article/details/99631249">https://blog.csdn.net/NoCortY/article/details/99631249</a><br><a href="https://blog.csdn.net/cungudafa/article/details/104585711">https://blog.csdn.net/cungudafa/article/details/104585711</a></p></blockquote><h2 id="一、安装ngnix"><a href="#一、安装ngnix" class="headerlink" title="一、安装ngnix"></a>一、安装ngnix</h2><ol><li>我们需要nginx作为我们的服务器，所以我们首先要安装nginx。可以使用yum命令直接进行安装，安装执行命令如下<br><code>yum install -y nginx</code></li><li>启动服务器：<pre><code>systemctl start nginxsystemctl enable nginx</code></pre></li><li>我们要记住的是**/etc/nginx/**是nginx默认的配置路径，一会要用到。</li></ol><h2 id="二、安装Node-js"><a href="#二、安装Node-js" class="headerlink" title="二、安装Node.js"></a>二、安装Node.js</h2><ol><li>安装nodejs有很多种方式，我这边就说一种<pre><code>curl -sL https://rpm.nodesource.com/setup_10.x | bash -yum install -y nodejs</code></pre></li><li>安装完成后执行 <code>node -v</code>和 <code>npm -v</code>如果打印版本号则安装成功</li></ol><h2 id="三、安装Git及配置仓库"><a href="#三、安装Git及配置仓库" class="headerlink" title="三、安装Git及配置仓库"></a>三、安装Git及配置仓库</h2><p><code>yum install git</code><br>见<a href="https://blog.csdn.net/NoCortY/article/details/99631249">https://blog.csdn.net/NoCortY/article/details/99631249</a></p><h2 id="四、创建blog-git空仓库"><a href="#四、创建blog-git空仓库" class="headerlink" title="四、创建blog.git空仓库"></a>四、创建blog.git空仓库</h2><p><a href="https://blog.csdn.net/cungudafa/article/details/104585711">https://blog.csdn.net/cungudafa/article/details/104585711</a></p><p>五、nginx配置<br><code>vi /etc/nginx/nginx.conf</code></p><ul><li>端口号（阿里云控制台安全组规则要打开端口哦）</li><li>修改域名</li><li>修改根目录位置  <pre><code>location/&#123;  root /home/git/projects/blog;&#125;</code></pre></li><li>修改用户为root用户 将user ngnix改为user root</li></ul><p>在服务器上重新运行nginx服务器<br><code>nginx -s reload</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用阿里云部署Flask网页</title>
      <link href="/post/6dff.html"/>
      <url>/post/6dff.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用阿里云部署Flask网页"><a href="#使用阿里云部署Flask网页" class="headerlink" title="使用阿里云部署Flask网页"></a>使用阿里云部署Flask网页</h1><h2 id="前端网页部署"><a href="#前端网页部署" class="headerlink" title="前端网页部署"></a>前端网页部署</h2><p><a href="https://www.jianshu.com/p/91308bd1414e">阿里云apache-CentOS</a><br>配置好Apache后，将一整个html、css、js文件全部copy进/var/www/html目录下。</p><p>之后就可以通过访问IP地址访问到你的index.html网页。</p><h2 id="后端Flask部署"><a href="#后端Flask部署" class="headerlink" title="后端Flask部署"></a>后端Flask部署</h2><p>单独安装torch以及torchvision，否则会直接安装GPU版本<br><a href="https://download.pytorch.org/whl/torch_stable.html">https://download.pytorch.org/whl/torch_stable.html</a><br>选择合适的版本。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://download.pytorch.org/whl/cpu/torchvision-0.5.0%2Bcpu-cp36-cp36m-linux_x86_64.whl<span class="token function">wget</span> https://download.pytorch.org/whl/cpu/torch-1.4.0%2Bcpu-cp36-cp36m-linux_x86_64.whlpip3 <span class="token function">install</span> torchvision-0.5.0%2Bcpu-cp36-cp36m-linux_x86_64.whlpip3 <span class="token function">install</span> torch-1.4.0%2Bcpu-cp36-cp36m-linux_x86_64.whl</code></pre><p>进入到后端服务的文件夹，将其余的环境依赖安装好。</p><pre class=" language-bash"><code class="language-bash"> pip3 <span class="token function">install</span> -r requirements.txt</code></pre><p>运行server.py文件即可。</p><pre class=" language-bash"><code class="language-bash">python3 serve.py</code></pre><p>&lt;如果遇到没有找到cv2包，重新<code>pip3 uninstall opencv-python pip3 install opencv-python</code>&gt;</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aliyun </tag>
            
            <tag> Flask </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Royal TSX通过阿里云搭建属于自己的linux主机（配合Python和Anaconda的安装）</title>
      <link href="/post/11db.html"/>
      <url>/post/11db.html</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到shenhao的AI-大数据技术之旅blog-Royal-TSX的配置"><a href="#欢迎来到shenhao的AI-大数据技术之旅blog-Royal-TSX的配置" class="headerlink" title="欢迎来到shenhao的AI +大数据技术之旅blog-Royal TSX的配置"></a>欢迎来到shenhao的AI +大数据技术之旅blog-Royal TSX的配置</h1><p>在这一篇文章中，我讲从安装到配置使用<strong>SSH以及STFP</strong>进行详细的说明。同时，会对<strong>Linux系统</strong>上安装python以及anaconda的详细步骤进行阐述。最终将配置一个<strong>pytorch环境</strong>作为最终的案例。<br>[video(video-5dCgroSF-1596276347458)(type-bilibili)(url-<a href="https://player.bilibili.com/player.html?aid=70623689)(image-https://ss.csdn.net/p?http://i0.hdslb.com/bfs/archive/4755957f5d4ab25eea49d6458701ccf7e93f5cbe.jpg)">https://player.bilibili.com/player.html?aid=70623689)(image-https://ss.csdn.net/p?http://i0.hdslb.com/bfs/archive/4755957f5d4ab25eea49d6458701ccf7e93f5cbe.jpg)</a>(title-怎样在Mac上SSH和FTP？完美替代XShell是哪个软件？item2吗？Royal TSX! 没有比它更好)]</p><h2 id="安装Royal-TSX"><a href="#安装Royal-TSX" class="headerlink" title="安装Royal TSX"></a>安装Royal TSX</h2><p>在 Windows 上好用的 shell 工具可能要数 <strong>xshell</strong>，但xshell并没有开发 mac 版本，所以想和远程服务器SSH连接可能要用macOS自带的终端 terminal 或者 iTerm2。<br>试过几个工具软件后，在macOS上最好用ssh工具客户端可能是 Royal TSX。（<strong>国产的Finalshell</strong>也能从一定程度上替代xshell，但是Royal TSX集成了更多的功能，也更为丰富）</p><ol><li><p>安装地址：<a href="https://royalapps.com/ts/mac/download">https://royalapps.com/ts/mac/download</a></p></li><li><p>下载完成后呈现如下的图片<br><img src="https://img-blog.csdnimg.cn/20200801015204281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="这是官方的图片"></p><h2 id="阿里云申请云服务器ECS"><a href="#阿里云申请云服务器ECS" class="headerlink" title="阿里云申请云服务器ECS"></a>阿里云申请云服务器ECS</h2></li><li><p>登陆阿里云平台申请或购买云服务器（点击概览会详细的官方教程）<br><img src="https://img-blog.csdnimg.cn/20200801020643706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>此时注意，我们只需要IP地址栏的公有IP地址。</p></li><li><p>找到目标实例，然后在操作列选择 【更多】 &gt;【 密码/密钥 】&gt; 重置实例密码，然后在弹出的对话框设置ECS实例的登录密码。<br><img src="https://img-blog.csdnimg.cn/20200801021014389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>在弹出的页面，单击【立即重启】使新密码生效。</p></li><li><p>在ECS实例列表页面，复制ECS实例的公网IP地址。</p><h2 id="安装连接SSH"><a href="#安装连接SSH" class="headerlink" title="安装连接SSH"></a>安装连接SSH</h2></li><li><p>安装Terminal插件。Royal TSX是一个插件型连接app，所有功能依靠插件实现。<br><img src="https://img-blog.csdnimg.cn/20200801015347684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>点击File-New Document，创建一个Document。试用版只能开一个Document，使用上没有任何限制。Document可以理解成一套链接配置文件。<br>然后点击新建的Document。点击左下角的+号-Terminal<br><img src="https://img-blog.csdnimg.cn/2020080101560987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>注意Computer Name就是供应商给出的ip地址。Port什么的默认不变。点击apply按钮。Display Name改为你自己取的名字。<br><img src="https://img-blog.csdnimg.cn/20200801015611412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>选择Common一栏中的Credentials，点击第一次选取框，选择Specify username and password。输入Username以及Password。之后Commond S保存后双击执行即可。<br><img src="https://img-blog.csdnimg.cn/20200801015837788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>输入 yes，然后输入云服务器的登录密码。<img src="https://img-blog.csdnimg.cn/20200801021253877.png" alt="在这里插入图片描述"><br>登录成功后会显示如下信息。<br><img src="https://img-blog.csdnimg.cn/20200801021253951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后我们就可以快乐的使用SSH啦！！！</p></li></ol><h2 id="配置使用SFTP"><a href="#配置使用SFTP" class="headerlink" title="配置使用SFTP"></a>配置使用SFTP</h2><ol><li>安装File Transfer插件</li><li>在Document下新建File Transfer项目。步骤和SSH类似，输入Computer Name（公共IP）。在这里我们选择SFTP type。<br><img src="https://img-blog.csdnimg.cn/20200801021455994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>进入Credentials，输入用户名和密码。双击即可登陆，如果熟悉Xshell的小伙伴就会很熟悉这个界面了。<br><img src="https://img-blog.csdnimg.cn/20200801021737716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="在Linux系统中配置Python3环境"><a href="#在Linux系统中配置Python3环境" class="headerlink" title="在Linux系统中配置Python3环境"></a>在Linux系统中配置Python3环境</h2></li><li>默认情况下，Linux会自带安装Python，可以运行python –version命令查看，如图：<br><img src="https://img-blog.csdnimg.cn/20200801022155121.png#pic_center" alt="在这里插入图片描述"><br>我们看到Linux中已经自带了Python2.7.5。再次运行python命令后就可以使用python命令窗口了。</li><li>安装python3</li></ol><ul><li>登录<a href="https://www.python.org/downloads/source/">https://www.python.org/downloads/source/</a>，找到对应版本（我们以Python 3.8.5为例）</li><li>选择Gzipped source tarball进行下载。</li><li>下载Python-3.8.5.tgz</li><li>文件上传：<br>将文件上传到Linux系统的某个目录下，根据自己情况上传，本例上传到了/root/目录下，如图：<br><img src="https://img-blog.csdnimg.cn/20200801022647884.png#pic_center" alt="在这里插入图片描述"></li><li>解压</li></ul><p>执行<code>tar -zxvf Python-3.6.5.tgz</code>命令，将文件解压到当前目录。</p><ul><li>准备编译环境，执行如下命令：<pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc <span class="token function">make</span></code></pre>安装python需要的依赖。成功后（Complete!）。</li><li>编译安装，执行<code>cd Python-3.8.5</code>进入解压后的Python-3.8.5目录下，依次执行如下三个命令：</li></ul><pre class=" language-bash"><code class="language-bash">./configure --prefix<span class="token operator">=</span>/root/training/Python-3.8.5<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span></code></pre><ul><li>创建软链接<br>还记得开始，Linux已经安装了python2.7.5，这里我们不能将它删除，如果删除，系统可能会出现问题。我们只需要按照与Python2.7.5相同的方式为Python3.8.5创建一个软链接即可，我们把软链接放到/usr/local/bin目录下。<br>执行如下代码：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -s root/training/Python-3.8.5/bin/python3.8 /usr/local/bin/python3<span class="token function">ls</span> -l /usr/local/bin/</code></pre><p>此时运行python3即可。<br><img src="https://img-blog.csdnimg.cn/20200801023426187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>配置环境变量</li></ul><p>配置环境变量主要是能快速使用pip3安装命令。</p><p>执行 <code>vi ~/.bash_profile</code>，打开配置文件，添加如下配置：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#配置python</span><span class="token function">export</span> PYTHON_HOME<span class="token operator">=</span>/root/training/Python-3.8.5<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PYTHON_HOME</span>/bin:<span class="token variable">$PATH</span></code></pre><p>保存退出（:wq），执行<code>source ~/.bash_profile</code>命令使配置生效。执行echo命令<code>echo $PYTHON_HOME/</code>，查看是否配置成功，如图：<br><img src="https://img-blog.csdnimg.cn/2020080102373583.png#pic_center" alt="在这里插入图片描述"></p><h2 id="Anaconda配置"><a href="#Anaconda配置" class="headerlink" title="Anaconda配置"></a>Anaconda配置</h2><ol><li>地址：<a href="https://www.anaconda.com/download/">https://www.anaconda.com/download/</a><br>打开如下图所示，这里大家就可以选择版本和适用的操作系统（Windows系统，苹果系统，Linux系统），这里我们下载Linux系统，另外python版本最好选择python3（就是图中的python3.8，因为官方已经不支持python2的维护了，并且python3不向下兼容，所以使用python3是大势所趋），并且更具自己的系统选择64位还是32位。<br><img src="https://img-blog.csdnimg.cn/20200801024035398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下好安装包（这里指的是Linux下的安装包），我们将安装包拷贝到Linux系统下。（通过SFPT接口安装到/home/shenhao目录下）可以先用mkdir创建/shenhao</li><li>安装anaconda</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> Anaconda3-2020.07-Linux-x86_64.sh</code></pre><p>然后一步步安装就可以了</p><blockquote><p>注意:安装的过程中要选择“yes”/“no”,一律选择“yes”，另外，会有一段安装的条款，我们一直回车就可以跳过。</p></blockquote><p><strong>安装完成之后要重启终端</strong>，anaconda才能生效</p><blockquote><ul><li>在安装的过程中，会问你安装路径，直接回车默认就可以了。有个地方问你是否将anaconda安装路径加入到环境变量（.bashrc)中，输入yes，默认的是no，</li><li>如果没输入就要配置环境，根据提示，在终端输入sudo vi /etc/profile，打开profile文件。添加语句export PATH=/home/shenhao/anaconda3/bin:$PATH，保存，退出。</li><li>重启终端</li></ul></blockquote><ul><li>输入conda list 就可以查询，你现在安装了哪些库，常用的numpy, scipy名列其中。如果你还有什么包没有安装上，可以运行conda install * 来进行安装，</li><li>如果某个包版本不是最新的，运行 conda update * 就可以了。</li></ul><h2 id="配置pytorch"><a href="#配置pytorch" class="headerlink" title="配置pytorch"></a>配置pytorch</h2><ol><li>配置清华源：<br>由于很多的python下的工具包的安装包在国外的服务器上，会影响国内的下载与使用，所以我们可以添加一下清华镜像，输入下面3句话就可以了。</li></ol><pre class=" language-bash"><code class="language-bash">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls <span class="token function">yes</span></code></pre><ol start="2"><li>pytorch环境：</li></ol><pre class=" language-bash"><code class="language-bash">conda create --name pytorch python<span class="token operator">=</span>3.8conda activate pytorchconda <span class="token function">install</span> pytorch torchvisionconda <span class="token function">install</span> scikit-learn</code></pre><p>如果要删除环境</p><pre class=" language-bash"><code class="language-bash">conda remove -n pytorch --all</code></pre><blockquote><p><a href="https://blog.csdn.net/weixin_41481113/article/details/83387315">linux下安装anaconda教程，并添加清华镜像</a><br><a href="https://www.bilibili.com/video/BV1EE411f7kZ?t=500">怎样在Mac上SSH和FTP？完美替代XShell是哪个软件？item2吗？Royal TSX! 没有比它更好</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Royal TSX </tag>
            
            <tag> VNC </tag>
            
            <tag> Aliyun </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNC远程图形桌面的配置之Ubuntu 18.04的Gnome实现</title>
      <link href="/post/a94f.html"/>
      <url>/post/a94f.html</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到shenhao的AI-大数据技术之旅blog-VNC远程图形桌面的配置之Ubuntu-18-04的Gnome实现"><a href="#欢迎来到shenhao的AI-大数据技术之旅blog-VNC远程图形桌面的配置之Ubuntu-18-04的Gnome实现" class="headerlink" title="欢迎来到shenhao的AI +大数据技术之旅blog-VNC远程图形桌面的配置之Ubuntu 18.04的Gnome实现"></a>欢迎来到shenhao的AI +大数据技术之旅blog-VNC远程图形桌面的配置之Ubuntu 18.04的Gnome实现</h1><p>VNC代表虚拟网络计算。从本质上讲，它是一个远程显示系统，不仅允许您在当前运行的计算机上查看桌面环境，而且从Internet上的任何地方的不同体系结构的计算机中查看远端的“桌面”环境。</p><p>VNC Server是用于在Linux环境中执行VNC（虚拟网络计算）桌面的软件。不同于Windows操作系统，只需激活远程桌面；在Linux上，必须安装VNC Server才能实时远程桌面。VNC服务器有很多软件，这里讨论如何使用TigerVNC安装VNC服务器。</p><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>首先准备一个Ubuntu 18.04服务器，它可以通过SSH远程或直接操作屏幕上的终端。下载软件需要有互联网连接。对于计算机上的VNC客户端，可以使用VNC Viewer应用程序，例如Royal TSX。<br><img src="https://img-blog.csdnimg.cn/20200803025029411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在本实验中，我们使用了一个带有Ubuntu 18.04（Bionic Beaver）操作系统的服务器，该操作系统使用SSH与本地连接进行访问。</p><h3 id="2-安装VNC服务器"><a href="#2-安装VNC服务器" class="headerlink" title="2. 安装VNC服务器"></a>2. 安装VNC服务器</h3><h4 id="2-1-系统更新"><a href="#2-1-系统更新" class="headerlink" title="2.1 系统更新"></a>2.1 系统更新</h4><p>在继续安装之前，请确保您的服务器已更新到最新版本。</p><pre class=" language-c"><code class="language-c">sudo apt updatesudo apt upgrade <span class="token operator">-</span>y</code></pre><p>如果有更新，则应重新启动服务器，以便可以使用最新的应用程序启动。</p><pre class=" language-c"><code class="language-c">sudo reboot</code></pre><h4 id="2-2-安装TigerVNC"><a href="#2-2-安装TigerVNC" class="headerlink" title="2.2 安装TigerVNC"></a>2.2 安装TigerVNC</h4><p>重新启动服务器后，安装所需的软件包，然后安装TigerVNC。</p><pre class=" language-c"><code class="language-c">sudo apt install xserver<span class="token operator">-</span>xorg<span class="token operator">-</span>coresudo apt install tigervnc<span class="token operator">-</span>standalone<span class="token operator">-</span>server tigervnc<span class="token operator">-</span>xorg<span class="token operator">-</span>extension tigervnc<span class="token operator">-</span>viewersudo apt<span class="token operator">-</span>get install gsfonts<span class="token operator">-</span>x11 xfonts<span class="token operator">-</span>base xfonts<span class="token operator">-</span>75dpi xfonts<span class="token operator">-</span>100dpi</code></pre><h4 id="2-3-安装Gnome-3桌面"><a href="#2-3-安装Gnome-3桌面" class="headerlink" title="2.3 安装Gnome 3桌面"></a>2.3 安装Gnome 3桌面</h4><p>接下来，在Ubuntu服务器上安装Gnome Desktop。</p><pre class=" language-c"><code class="language-c">sudo apt install ubuntu<span class="token operator">-</span>gnome<span class="token operator">-</span>desktop</code></pre><p>启动gnome桌面服务，并确保它在启动时运行。</p><pre class=" language-c"><code class="language-c">sudo systemctl start gdmsudo systemctl enable gdm</code></pre><h4 id="2-4-VNC密码设置"><a href="#2-4-VNC密码设置" class="headerlink" title="2.4 VNC密码设置"></a>2.4 VNC密码设置</h4><p>这一步设置连接到VNC服务器时所使用的VNC密码。使用以下命令:</p><pre class=" language-c"><code class="language-c">vncpasswd</code></pre><p>输入密码，然后确认。如果需要，您可以将密码设置为只读权限。如果不需要，可以按N键确认。</p><p>如果vncpasswd命令无效，请使用vncserver命令，输入密码，然后终止vncserver。</p><pre class=" language-c"><code class="language-c">vncserver <span class="token punctuation">:</span><span class="token number">1</span></code></pre><pre class=" language-c"><code class="language-c">vncserver <span class="token operator">-</span>kill <span class="token punctuation">:</span><span class="token number">1</span></code></pre><h3 id="3-启动脚本设置"><a href="#3-启动脚本设置" class="headerlink" title="3. 启动脚本设置"></a>3. 启动脚本设置</h3><p>接下来，我们将创建一个启动脚本作为初始配置，将在激活VNC服务器时执行。使用<code>vim</code>命令创建<code>~/.vnc/xstartup</code>文件。</p><pre class=" language-c"><code class="language-c">vim <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>vnc<span class="token operator">/</span>xstartup</code></pre><p>然后填写以下代码。</p><pre class=" language-c"><code class="language-c">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">[</span> <span class="token operator">-</span>x <span class="token operator">/</span>etc<span class="token operator">/</span>vnc<span class="token operator">/</span>xstartup <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> exec <span class="token operator">/</span>etc<span class="token operator">/</span>vnc<span class="token operator">/</span>xstartup<span class="token punctuation">[</span> <span class="token operator">-</span>r $HOME<span class="token operator">/</span><span class="token punctuation">.</span>Xresources <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> xrdb $HOME<span class="token operator">/</span><span class="token punctuation">.</span>Xresourcesvncconfig <span class="token operator">-</span>iconic <span class="token operator">&amp;</span>dbus<span class="token operator">-</span>launch <span class="token operator">--</span>exit<span class="token operator">-</span>with<span class="token operator">-</span>session gnome<span class="token operator">-</span>session <span class="token operator">&amp;</span></code></pre><p>保存并退出后，给~/.vnc/xstartup文件添加可执行权限:</p><pre class=" language-c"><code class="language-c">sudo chmod a<span class="token operator">+</span>x <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>vnc<span class="token operator">/</span>xstartup</code></pre><h4 id="3-1-启动VNC服务器"><a href="#3-1-启动VNC服务器" class="headerlink" title="3.1 启动VNC服务器"></a>3.1 启动VNC服务器</h4><p>要运行VNC服务器，可以使用以下命令:</p><pre class=" language-c"><code class="language-c">vncserver <span class="token operator">-</span>localhost no <span class="token operator">-</span>geometry 1920x950 <span class="token operator">-</span>depth <span class="token number">24</span></code></pre><p>上述选项将创建一个会话，允许外部连接具有1920x950像素分辨率和清晰度24.</p><p>在Ubuntu操作系统上，分辨率可以用xrandr -q命令查看.</p><p>您可以根据自己的喜好配置分辨率和清晰度。</p><h3 id="4-连接到VNC-服务器"><a href="#4-连接到VNC-服务器" class="headerlink" title="4. 连接到VNC 服务器"></a>4. 连接到VNC 服务器</h3><p>好了，安装过程完成后，您可以使用我们之前安装的Royal TSX连接到VNC服务器。</p><p>输入服务器的IP地址和使用的端口5901（当VNC进程数为1时）。 </p><p><img src="https://img-blog.csdnimg.cn/20200803025818706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200803025820980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-另外的一些事情"><a href="#5-另外的一些事情" class="headerlink" title="5. 另外的一些事情"></a>5. 另外的一些事情</h3><p>有关VNC服务器的一些信息，以便更好地了解VNC服务器的工作原理。</p><p>要查看连接到VNC服务器的用户列表，您可以使用以下命令:<code>vncserver -list</code></p><p>查看VNC服务器是否处于活动状态:</p><pre class=" language-c"><code class="language-c">pgrep Xtigervnc 或者 ss <span class="token operator">-</span>tulpn <span class="token operator">|</span> egrep <span class="token operator">-</span>i <span class="token string">'vnc|590'</span></code></pre><p>5.3 终止VNC会话</p><p>您可以使用以下命令终止VNC会话。</p><pre class=" language-c"><code class="language-c">vncserver <span class="token operator">-</span>kill <span class="token punctuation">:</span><span class="token number">1</span></code></pre><p>以上命令将终止ID为1的VNC会话。您可以自定义ID。 </p><p>或者，您可以使用通配符标记终止所有VNC会话。</p><pre class=" language-c"><code class="language-c">vncserver <span class="token operator">-</span>kill <span class="token punctuation">:</span><span class="token operator">*</span></code></pre><p>运行此命令时，所有连接到VNC的用户都将自动断开连接</p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>并非所有的Linux应用程序都可以使用命令行界面（CLI）执行，有些应用只能通过桌面完成。 Ubuntu 18 Gnome 3 桌面漂亮且易于使用，安装VNC服务器，使我们可以从任何计算机远程访问桌面并执行桌面活动。</p><h3 id="7-设置系统语言为中文"><a href="#7-设置系统语言为中文" class="headerlink" title="7. 设置系统语言为中文"></a>7. 设置系统语言为中文</h3><h4 id="一、查看当前语言环境"><a href="#一、查看当前语言环境" class="headerlink" title="一、查看当前语言环境"></a>一、查看当前语言环境</h4><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token variable">$LANG</span></code></pre><h4 id="二、安装中文语言包"><a href="#二、安装中文语言包" class="headerlink" title="二、安装中文语言包"></a>二、安装中文语言包</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> language-pack-zh-hans<span class="token function">sudo</span> apt <span class="token function">install</span> language-pack-zh-hant<span class="token function">sudo</span> apt <span class="token function">install</span> language-pack-zh-hant-base<span class="token function">sudo</span> apt <span class="token function">install</span> language-pack-gnome-zh-hant<span class="token function">sudo</span> apt <span class="token function">install</span> language-pack-gnome-zh-hant-base</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token variable"><span class="token variable">`</span>check-language-support -l zh<span class="token variable">`</span></span></code></pre><h4 id="三、修改-etc-default-locale"><a href="#三、修改-etc-default-locale" class="headerlink" title="三、修改/etc/default/locale"></a>三、修改<code>/etc/default/locale</code></h4><p>进入Ubuntu桌面，打开终端，输入下述的命令：</p><pre class=" language-bash"><code class="language-bash">vim /etc/default/locale</code></pre><p>进入文件，修改为：</p><pre class=" language-bash"><code class="language-bash">LANG<span class="token operator">=</span><span class="token string">'en_US'</span> <span class="token comment" spellcheck="true"># 中文可以用‘zh_CN’</span>LANGUAGE<span class="token operator">=</span><span class="token string">'en_US:en'</span> <span class="token comment" spellcheck="true"># 中文可以用‘zh_CN:zh’</span></code></pre><h4 id="四、重启服务"><a href="#四、重启服务" class="headerlink" title="四、重启服务"></a>四、重启服务</h4><p><code>reboot</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> VNC </tag>
            
            <tag> Gnome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Royal TSX 使用VNC登陆Ubuntu18.04远程桌面</title>
      <link href="/post/7b11.html"/>
      <url>/post/7b11.html</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到shenhao的AI-大数据技术之旅blog-VNC远程图形桌面的配置之Ubuntu-18-04"><a href="#欢迎来到shenhao的AI-大数据技术之旅blog-VNC远程图形桌面的配置之Ubuntu-18-04" class="headerlink" title="欢迎来到shenhao的AI +大数据技术之旅blog-VNC远程图形桌面的配置之Ubuntu 18.04"></a>欢迎来到shenhao的AI +大数据技术之旅blog-VNC远程图形桌面的配置之Ubuntu 18.04</h1><blockquote><p><strong>Linux云服务器</strong>一般采用SSH连接方式，使用密钥对进行安全地无密码访问。但是SSH连接一般都是字符界面，有时我们需要使用图形界面进行一些复杂操作。本篇文章将以<strong>Ubuntu 18.04</strong>操作系统为例，介绍如何为云服务器安装<strong>VNC Server</strong>，以及如何使用Royal TSX连接云服务器。</p></blockquote><h2 id="VNC服务器搭建"><a href="#VNC服务器搭建" class="headerlink" title="VNC服务器搭建"></a>VNC服务器搭建</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><ul><li>已创建一台Ubuntu 18.04操作系统的云服务器，并且为云服务器绑定弹性公网IP，确保可以连接互联网。</li><li>已在本地macos系统安装Royal RSX客户端，并安装VNC的插件。</li></ul><h3 id="2-安装VNC-Server"><a href="#2-安装VNC-Server" class="headerlink" title="2. 安装VNC Server"></a>2. 安装VNC Server</h3><p>默认情况下，Ubuntu 18.04操作系统没有安装图形环境或VNC Server。本示例中，桌面环境使用Xfce，它是一个精简的轻量化桌面，与Gnome和KDE相比更小巧，并且界面美观、对用户友好，适合云服务器远程连接场景下使用。</p><ol><li><p>通过Royal TSX的ssh插件远程登录云服务器。<br>帐号、密码：您在创建云服务器时设置的密码。</p></li><li><p>执行以下命令，更新软件列表。</p></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update</code></pre><ol start="3"><li>安装Xfce桌面环境。</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> xfce4 xfce4-goodies</code></pre><ol start="4"><li>执行完成后，安装<strong>vnc4server</strong>服务器。</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> vnc4server</code></pre><ol start="5"><li>安装完成后使用<code>vnc4server</code>命令设置安全密码并初始化配置文件：</li></ol><pre class=" language-bash"><code class="language-bash">vnc4server<span class="token operator">>></span><span class="token operator">></span> You will require a password to access you desktop<span class="token operator">>></span><span class="token operator">></span> Password:<span class="token operator">>></span><span class="token operator">></span> Verify:</code></pre><ol start="6"><li>注意最后问是否设置一个只读密码要选否，否则客户端登陆只会看到一个黑屏：<pre class=" language-bash"><code class="language-bash">Would you like to enter a view-only password <span class="token punctuation">(</span>y/n<span class="token punctuation">)</span>? n</code></pre></li></ol><ul><li>密码：长度为6~8个字符。超过8个字符的密码将自动截断。请牢- - 记该密码，VNC Viewer连接云服务器时会使用。</li><li>验证密码：再次输入密码。</li><li>是否创建仅查看密码：使用仅查看密码登录的用户将无法使用鼠标或键盘控制云服务器。此处输入“n”。</li></ul><h3 id="3-配置VNC服务器"><a href="#3-配置VNC服务器" class="headerlink" title="3. 配置VNC服务器"></a>3. 配置VNC服务器</h3><ol><li>首先停止第一个虚拟桌面。</li></ol><pre class=" language-bash"><code class="language-bash">vncserver -kill :1</code></pre><ol start="2"><li>修改xstartup文件。</li></ol><pre class=" language-c"><code class="language-c">vim <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>vnc<span class="token operator">/</span>xstartup</code></pre><p>按“i”进入编辑模式，添加以下内容：</p><pre class=" language-c"><code class="language-c">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token macro property"># Uncomment the following two lines for normal desktop:</span><span class="token macro property"># unset SESSION_MANAGER</span><span class="token macro property"># exec /etc/X11/xinit/xinitrc</span><span class="token punctuation">[</span> <span class="token operator">-</span>x <span class="token operator">/</span>etc<span class="token operator">/</span>vnc<span class="token operator">/</span>xstartup <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> exec <span class="token operator">/</span>etc<span class="token operator">/</span>vnc<span class="token operator">/</span>xstartup<span class="token punctuation">[</span> <span class="token operator">-</span>r $HOME<span class="token operator">/</span><span class="token punctuation">.</span>Xresources <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> xrdb $HOME<span class="token operator">/</span><span class="token punctuation">.</span>Xresourcesxsetroot <span class="token operator">-</span>solid greyvncconfig <span class="token operator">-</span>iconic <span class="token operator">&amp;</span>x<span class="token operator">-</span>terminal<span class="token operator">-</span>emulator <span class="token operator">-</span>geometry 80x24<span class="token operator">+</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">10</span> <span class="token operator">-</span>ls <span class="token operator">-</span>title <span class="token string">"$VNCDESKTOP"</span> <span class="token operator">&amp;</span>unset SESSION_MANAGERunset DBUGS_SESSION_BUS_ADDRESSstartxfce4 <span class="token operator">&amp;</span></code></pre><p>其中，前两行是销毁被侵占的环境变量，最后一行表明使用的为xfce的桌面系统。<br>3. 为了保证VNC服务正常启动，需要配置可执行。</p><pre class=" language-c"><code class="language-c">sudo chmod <span class="token operator">+</span>x <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>vnc<span class="token operator">/</span>xstartup</code></pre><h2 id="正式开启VNC服务"><a href="#正式开启VNC服务" class="headerlink" title="正式开启VNC服务"></a>正式开启VNC服务</h2><p>执行<code>vnc4server</code>命令正式开启VNC服务。默认在5901端口上启动默认服务器实例。该端口为显示端口，由VNC称为:1。实质上VNC使用的TCP端口从5900开始，尾数与桌面号相关。1号桌面为5901，2号桌面为5902，依次类推。</p><p>手动启动VNC服务时可以直接指定分辨率与桌面号，命令如下：</p><pre class=" language-c"><code class="language-c">vnc4server <span class="token operator">-</span>geometry 1920x1080 <span class="token punctuation">:</span><span class="token number">1</span></code></pre><p>停止服务的命令为：</p><pre class=" language-c"><code class="language-c">vnc4server <span class="token operator">-</span>kill <span class="token punctuation">:</span><span class="token number">1</span></code></pre><h2 id="关闭TCP端口的防火墙"><a href="#关闭TCP端口的防火墙" class="headerlink" title="关闭TCP端口的防火墙"></a>关闭TCP端口的防火墙</h2><p>在远程连接VNC服务之前，我们还需要关闭相应TCP端口的防火墙，命令如下：</p><pre class=" language-c"><code class="language-c">sudo ufw allow <span class="token number">5901</span></code></pre><h2 id="云服务器控制台配置"><a href="#云服务器控制台配置" class="headerlink" title="云服务器控制台配置"></a>云服务器控制台配置</h2><ol><li>登录云服务器管理控制台。</li><li>单击弹性云服务器名称，进入详情页面。</li><li>在“安全组”页签，单击“更改安全组规则”，放行5901端口。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdXBwb3J0Lmh1YXdlaWNsb3VkLmNvbS9iZXN0cHJhY3RpY2UtZWNzL3poLWNuX2ltYWdlXzAyMjE0NzQxNTQucG5n?x-oss-process=image/format,png#pic_center" alt="在这里插入图片描述"><blockquote><p>说明：<br>如果4中回显的日志文件为“xxx:2.log”，则需要放行5902端口；如果为“xxx:3.log”，则需要放行5903端口，以此类推。</p></blockquote></li></ol><h2 id="使用VNC-Viewer连接云服务器"><a href="#使用VNC-Viewer连接云服务器" class="headerlink" title="使用VNC Viewer连接云服务器"></a>使用VNC Viewer连接云服务器</h2><p>在本地PC打开Royal TSX客户端，输入云服务器的弹性公网IP，端口号为5901，输入root以及密码，单击“Apply &amp; Close”。</p><p><img src="https://img-blog.csdnimg.cn/20200803020844911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200803020844867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登陆链接<br><img src="https://img-blog.csdnimg.cn/20200803020845129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwNjM0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://baijiahao.baidu.com/s?id=1645514514391414083&wfr=spider&for=pc">Ubuntu Desktop 18.04 Gnome桌面配置VNC Server</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Royal TSX </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> VNC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客部署到码云和 Coding</title>
      <link href="/post/e7ac.html"/>
      <url>/post/e7ac.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-博客部署到码云和-Coding"><a href="#Hexo-博客部署到码云和-Coding" class="headerlink" title="Hexo 博客部署到码云和 Coding"></a>Hexo 博客部署到码云和 Coding</h1><h2 id="部署到-Coding-平台"><a href="#部署到-Coding-平台" class="headerlink" title="部署到 Coding 平台"></a>部署到 Coding 平台</h2><h3 id="1-首先去官网进行注册，也可以用第三方微信进行注册。"><a href="#1-首先去官网进行注册，也可以用第三方微信进行注册。" class="headerlink" title="1. 首先去官网进行注册，也可以用第三方微信进行注册。"></a>1. 首先去官网进行注册，也可以用第三方微信进行注册。</h3><pre><code>![](https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/Hexo_1.png)</code></pre><h3 id="2-注册完成之后就会进入主页面，然后创建新项目，如下图所示"><a href="#2-注册完成之后就会进入主页面，然后创建新项目，如下图所示" class="headerlink" title="2. 注册完成之后就会进入主页面，然后创建新项目，如下图所示"></a>2. 注册完成之后就会进入主页面，然后创建新项目，如下图所示</h3><blockquote><p>项目名称：与你的用户名相同，用户名就是你的团队名</p></blockquote><p>   <img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/Hexo_2.png"></p><hr><ul><li>代码托管项目：用于托管代码仓库，支持多个仓库，并可选择开启 CI/CD 和制品库功能</li><li>项目管理项目：支持 Scrum 敏捷管理和传统任务管理项目，包含需求、任务和缺陷</li><li>DevOps 项目：包含项目管理、代码托管、CI/CD 和制品库等功能，提供完整的研发流程</li></ul><hr><p>在这里我们选择第三个，DevOps 项目，这个含有构建与部署功能。<br>选择第三个 DevOps 项目后，会出现下面的页面：</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/Hexo_3.png"></p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/Hexo_4.png"></p><h3 id="3-添加部署公钥"><a href="#3-添加部署公钥" class="headerlink" title="3. 添加部署公钥"></a>3. 添加部署公钥</h3><pre><code>在个人设置里面，点击**SSH 公钥** 。点击**新增公钥**。![](https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/Hexo_5.png)</code></pre><p>​    <img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/Hexo_6.png"></p><ul><li><p>公钥名称：自定义</p></li><li><p>公钥内容：可以使用之前连接 GitHub 的公钥，在本地的 <code>C:\Users\你的电脑账户名\.ssh</code>，我的为 <code>C:\Users\Administrator\.ssh</code>，用文本编辑器打开 id_rsa.pub，将里面的内容复制粘贴到此处即可。</p></li><li><p>公钥有效期：选择永久有效</p></li></ul><p>点击添加，然后回弹出一个密码框，输入你的用户密码验证一下即可，然后打开 cmd 控制台输入 ssh -T <a href="mailto:&#x67;&#105;&#x74;&#64;&#x65;&#x2e;&#x63;&#x6f;&#x64;&#105;&#x6e;&#103;&#x2e;&#110;&#x65;&#116;">&#x67;&#105;&#x74;&#64;&#x65;&#x2e;&#x63;&#x6f;&#x64;&#105;&#x6e;&#103;&#x2e;&#110;&#x65;&#116;</a>，第一次建立连接会要求信任主机，输入相关的用户名或者密码，在控制台输入验证，验证成功即可。</p><p>然后复制你的项目地址，粘贴到站点目录下的配置文件，如图所示：</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/Hexo_7.png"></p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/Hexo_8.png"></p><p>然后再执行 <code>hexo clean &amp;&amp; hexo g -d</code> 部署到 coding，紧接着，打开你的 coding 项目管理页，进行静态网站构建，页面如下，按图中步骤操作即可：</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/Hexo_9.png"></p><p>点击保存，就会进入下一个页面：</p><p>点击立即部署，当出现如下的页面效果，就说明部署成功。</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/Hexo_10.png"></p><p>点击图中的访问地址就可以查看效果了。</p><h3 id="4-绑定域名"><a href="#4-绑定域名" class="headerlink" title="4. 绑定域名"></a>4. 绑定域名</h3><p>在绑定域名之前首先需要将访问地址添加到 DNS 域名解析之中。</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/20200128164410.png"></p><p>我的添加记录为：</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/20200128164514.png"></p><p>线路类型我选择的是境内，也就是说，当境内有人访问时，会通过国内的 Coding 平台。</p><p>然后点击上一张图所显示的设置按钮，进入静态网站设置页面：</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/2020-01-28_13-57-11.png"></p><p>在绑定新域名下的输入框，输入你的域名，然后点击绑定即可。</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/20200128164204.png"></p><blockquote><p>如果再申请 Coding 的证书的过程中，申请失败，请先到域名管理控制台停止对 GitHub 有关的解析，然后再申请，申请成功后，再开启有关对 GitHub 的解析即可。</p></blockquote><h2 id="部署到码云"><a href="#部署到码云" class="headerlink" title="部署到码云"></a>部署到码云</h2><h3 id="1-同样，先去码云官网进行注册，注册完成后，会跳转到如下的页面："><a href="#1-同样，先去码云官网进行注册，注册完成后，会跳转到如下的页面：" class="headerlink" title="1. 同样，先去码云官网进行注册，注册完成后，会跳转到如下的页面："></a>1. 同样，先去码云官网进行注册，注册完成后，会跳转到如下的页面：</h3><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/18.png"></p><h3 id="2-开始新建仓库，如上一张图的操作步骤，会出现如下效果："><a href="#2-开始新建仓库，如上一张图的操作步骤，会出现如下效果：" class="headerlink" title="2. 开始新建仓库，如上一张图的操作步骤，会出现如下效果："></a>2. 开始新建仓库，如上一张图的操作步骤，会出现如下效果：<img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/19.png"></h3><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/22.png"></p><blockquote><p>注意：仓库名称必须要和用户名一样，否则最后部署出来会出现无样式的效果或者其他不正常的显示。</p></blockquote><h3 id="3-添加公钥"><a href="#3-添加公钥" class="headerlink" title="3. 添加公钥"></a>3. 添加公钥</h3><p>点击管理 —&gt; 部署公钥管理 —&gt; 新增部署公钥，添加公钥的内容也是之前部署到 GitHub 上添加的公钥</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/20200128165859.png"></p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/2020-01-28_14-12-50.png"></p><h3 id="4-部署到码云"><a href="#4-部署到码云" class="headerlink" title="4. 部署到码云"></a>4. 部署到码云</h3><p>将项目地址复制粘贴到配置文件上，如下图所示：</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/23.png"></p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/15.png"></p><p>然后执行<code> hexo clean &amp;&amp; hexo g -d</code>，部署成功后，点击服务 —&gt;Gitee Pages，进入下面的页面：</p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/20.png"></p><p><img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/21.png"></p><p>第一次设置 Gitee Pages 的效果不是我图中所显示的，最后的设置效果就是这样的，当显示图中红色文字已开启 Gitee PAges 服务, 即部署成功，点击网址，查看效果。</p><h2 id="国内-Coding，国外-Github"><a href="#国内-Coding，国外-Github" class="headerlink" title="国内 Coding，国外 Github"></a>国内 Coding，国外 Github</h2><p>在 DNS 域名解析中设置线路类型即可：</p><p>我的为：<img src="https://gitee.com/shenhao-stu/picgo/raw/master/Jisoo/20200128172347.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo个性化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Coding </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Picgo图床配置</title>
      <link href="/post/bfd4.html"/>
      <url>/post/bfd4.html</url>
      
        <content type="html"><![CDATA[<h1 id="PicGo图床配置教程"><a href="#PicGo图床配置教程" class="headerlink" title="PicGo图床配置教程"></a>PicGo图床配置教程</h1><h2 id="一、什么是图床"><a href="#一、什么是图床" class="headerlink" title="一、什么是图床"></a>一、什么是图床</h2><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。 </p><p>简单来说就是：在文章中引用指定网址显示图片。 </p><p><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/1.png"></p><p><font color="red">平常我们都是在网络上复制粘贴网络图片的地址，太out了，如何快速引用本地图片呢？？</font></p><h2 id="二、配置教程"><a href="#二、配置教程" class="headerlink" title="二、配置教程"></a>二、配置教程</h2><h3 id="1-获取Token"><a href="#1-获取Token" class="headerlink" title="1.获取Token"></a>1.获取Token</h3><blockquote><p> github云端仓库位置： 延续上一次cdn的仓库失败。（建议新建一个仓库，发布过release版本号的仓库会使用异常）</p></blockquote><p>1.进入设置Setting<br><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/3.png"><br>2.选择开发者设置Developer setting<br><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/2.png"><br>3.选择个人数据帧Personal access tokens，生成新的数据帧 Generate new token<br><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/4.png"><br>4.命名为picgo（图床），赋予仓库权限<br><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/5.png"><br>5.最后点击Generate token即可看到显示的token页面，<strong>它只会显示一次，关闭页面后再打开这个页面就不会显示了。</strong> 复制token值粘贴到文本文档中，先保存下来，后面配置PicGo要用到。<br><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/6.png"></p><h3 id="2-本地安装图片上传工具"><a href="#2-本地安装图片上传工具" class="headerlink" title="2.本地安装图片上传工具"></a>2.本地安装图片上传工具</h3><ol><li><p>首先下载PicGo，图片上传工具PicGo下载址:<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p></li><li><p>安装配置PicGo<br><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/7.png"></p></li></ol><ul><li>设定仓库名：这个是刚刚第一步所新建仓库的名称，我的为cdn，此处填写格式username/repo。 </li><li>设定分支名：master，采用默认分支即可 </li><li>设定Token：此处填写上一步得到的Token，添加到输入框即可。</li><li>指定存储路径：自定义，例：images/，相当于在刚刚新建的仓库下新建了一个文件夹。 </li><li>设定自定义域名：cdn加速格式：<a href="https://cdn.jsdelivr.net/gh/username/repo">https://cdn.jsdelivr.net/gh/username/repo</a></li><li>username为GitHub用户名，repo为新建的仓库，用于存储图片 </li></ul><h2 id="三、上传方法"><a href="#三、上传方法" class="headerlink" title="三、上传方法"></a>三、上传方法</h2><ol><li><p>快捷键上传 </p></li><li><p>拖拽上传<br><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/8.png"><br>上传后，云端图片显示：<br><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/9.png"></p></li><li><p>使用方法：选择<strong>相册</strong>，可<strong>复制、修改链接、删除</strong>图片（不能删除github上的图片，需要手动删除）：<br><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/11.png"> </p></li></ol><h2 id="四、解决无法上传的问题"><a href="#四、解决无法上传的问题" class="headerlink" title="四、解决无法上传的问题"></a>四、解决无法上传的问题</h2><p>进入PicGo设置，找到设置Server，并选择关闭<br><img src="https://cdn.jsdelivr.net/gh/shenhao-stu/picgo/images/10.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo个性化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-2020详细教程</title>
      <link href="/post/3254.html"/>
      <url>/post/3254.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-2020详细教程-lt-配合千锋Java学习营-gt"><a href="#Docker-2020详细教程-lt-配合千锋Java学习营-gt" class="headerlink" title="Docker-2020详细教程&lt;配合千锋Java学习营&gt;"></a>Docker-2020详细教程&lt;配合千锋Java学习营&gt;</h1><h2 id="一、Docker介绍"><a href="#一、Docker介绍" class="headerlink" title="一、Docker介绍"></a>一、Docker介绍</h2><h3 id="1-下载Dcoker依的赖环境"><a href="#1-下载Dcoker依的赖环境" class="headerlink" title="1.下载Dcoker依的赖环境"></a>1.下载Dcoker依的赖环境</h3><pre class=" language-bash"><code class="language-bash">想安装Docker，需要先将依赖的环境全部下载下来，就像Maven依赖JDK一样yum -y <span class="token function">install</span> yum-utils device-mapper-persistent-data lvm2</code></pre><h3 id="2-指定Docker镜像源"><a href="#2-指定Docker镜像源" class="headerlink" title="2.指定Docker镜像源"></a>2.指定Docker镜像源</h3><pre class=" language-powershell"><code class="language-powershell">默认下载Docker会去国外服务器下载，速度较慢，可以设置为阿里云镜像源，速度更快yum<span class="token operator">-</span>config<span class="token operator">-</span>manager <span class="token operator">--</span>add<span class="token operator">-</span>repo http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo</code></pre><h3 id="3-安装Docker"><a href="#3-安装Docker" class="headerlink" title="3.安装Docker"></a>3.安装Docker</h3><pre class=" language-powershell"><code class="language-powershell">yum makecache fastyum <span class="token operator">-</span>y install docker<span class="token operator">-</span>ce</code></pre><h3 id="4-启动Docker并测试"><a href="#4-启动Docker并测试" class="headerlink" title="4.启动Docker并测试"></a>4.启动Docker并测试</h3><pre class=" language-powershell"><code class="language-powershell">安装成功后，需要手动启动，设置为开机启动，并测试一下 Docker<span class="token comment" spellcheck="true">#启动docker服务</span>systemctl <span class="token function">start</span> docker<span class="token comment" spellcheck="true">#设置开机自动启动</span>systemctl enable docker<span class="token comment" spellcheck="true">#测试</span>docker run hello<span class="token operator">-</span>world</code></pre><h2 id="二、Docker的中央仓库"><a href="#二、Docker的中央仓库" class="headerlink" title="二、Docker的中央仓库"></a>二、Docker的中央仓库</h2><pre class=" language-powershell"><code class="language-powershell">1<span class="token punctuation">.</span>Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度较慢。https:<span class="token operator">/</span><span class="token operator">/</span>hub<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com<span class="token operator">/</span>2<span class="token punctuation">.</span>国内的镜像网站：网易蜂巢，daoCloud等，下载速度快，但是镜像相对不全。https:<span class="token operator">/</span><span class="token operator">/</span>c<span class="token punctuation">.</span>163yun<span class="token punctuation">.</span>com<span class="token operator">/</span>hub<span class="token comment" spellcheck="true">#/home </span>http:<span class="token operator">/</span><span class="token operator">/</span>hub<span class="token punctuation">.</span>daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span> （推荐使用）3<span class="token punctuation">.</span>在公司内部会采用私服的方式拉取镜像（添加配置）<span class="token comment" spellcheck="true">#需要创建 /etc/docker/daemon.json，并添加如下内容</span>&amp;<span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"insecure-registries"</span>:<span class="token punctuation">[</span><span class="token string">"ip:port"</span><span class="token punctuation">]</span>&amp;<span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true">#重启两个服务</span>systemctl daemon<span class="token operator">-</span>reloadsystemctl restart docker</code></pre><h2 id="三、镜像的操作"><a href="#三、镜像的操作" class="headerlink" title="三、镜像的操作"></a>三、镜像的操作</h2><h3 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h3><pre class=" language-powershell"><code class="language-powershell">从中央仓库拉取镜像到本地docker pull 镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#举个栗子:docker pull daocloud.io/library/tomcat:8.5.15-jre8</span></code></pre><h3 id="2-查看本地全部镜像"><a href="#2-查看本地全部镜像" class="headerlink" title="2.查看本地全部镜像"></a>2.查看本地全部镜像</h3><pre class=" language-powershell"><code class="language-powershell">查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小docker images</code></pre><h3 id="3-删除本地镜像"><a href="#3-删除本地镜像" class="headerlink" title="3.删除本地镜像"></a>3.删除本地镜像</h3><pre class=" language-powershell"><code class="language-powershell">镜像会占用磁盘空间，可以直接手动删除，标识通过查看获取docker rmi 镜像的标识</code></pre><h3 id="4-镜像的导入导出"><a href="#4-镜像的导入导出" class="headerlink" title="4.镜像的导入导出"></a>4.镜像的导入导出</h3><pre class=" language-powershell"><code class="language-powershell">如果因为网络原因可以通过硬盘的方式传输镜像，虽然不规范，但是有效，但是这种方式导出的镜像名称和版本都是null，需要手动修改<span class="token comment" spellcheck="true">#将本地的镜像导出</span>docker save <span class="token operator">-</span>o 导出的路径 镜像id<span class="token comment" spellcheck="true">#加载本地的镜像文件</span>docker load <span class="token operator">-</span>i 镜像文件<span class="token comment" spellcheck="true">#修改镜像文件</span>docker tag 镜像id 新镜像名称：版本</code></pre><h2 id="四、容器的操作"><a href="#四、容器的操作" class="headerlink" title="四、容器的操作"></a>四、容器的操作</h2><h3 id="1-运行容器"><a href="#1-运行容器" class="headerlink" title="1.运行容器"></a>1.运行容器</h3><pre class=" language-powershell"><code class="language-powershell">运行容器需要定制具体镜像，如果镜像不存在，会直接下载<span class="token comment" spellcheck="true">#简单操作</span>docker run 镜像的标识<span class="token punctuation">|</span>镜像的名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#常用的参数</span>docker run <span class="token operator">-</span>d <span class="token operator">-</span>p 宿主机端口:容器端口 <span class="token operator">--</span>name 容器名称 镜像的标识<span class="token punctuation">|</span>镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#-d:代表后台运行容器</span><span class="token comment" spellcheck="true">#-p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口</span><span class="token comment" spellcheck="true">#--name 容器名称:指定容器的名称</span></code></pre><h3 id="2-查看正在运行的容器"><a href="#2-查看正在运行的容器" class="headerlink" title="2.查看正在运行的容器"></a>2.查看正在运行的容器</h3><pre class=" language-powershell"><code class="language-powershell">查看全部正在运行的容器信息docker <span class="token function">ps</span> <span class="token punctuation">[</span><span class="token operator">-</span>qa<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#-a 查看全部的容器，包括没有运行</span><span class="token comment" spellcheck="true">#-q 只查看容器的标识</span></code></pre><h3 id="3-查看容器日志"><a href="#3-查看容器日志" class="headerlink" title="3.查看容器日志"></a>3.查看容器日志</h3><pre class=" language-powershell"><code class="language-powershell">查看容器日志，以查看容器运行的信息docker logs <span class="token operator">-</span>f 容器id<span class="token comment" spellcheck="true">#-f：可以滚动查看日志的最后几行</span></code></pre><h3 id="4-进入容器的内部"><a href="#4-进入容器的内部" class="headerlink" title="4.进入容器的内部"></a>4.进入容器的内部</h3><pre class=" language-powershell"><code class="language-powershell">可以进入容器的内部进行操作docker exec <span class="token operator">-</span>it 容器id bash</code></pre><h3 id="5-复制内容到容器"><a href="#5-复制内容到容器" class="headerlink" title="5.复制内容到容器"></a>5.复制内容到容器</h3><pre class=" language-powershell"><code class="language-powershell">将宿主机的文件复制到容器内部的指定目录docker <span class="token function">cp</span> 文件名称 容器id:容器内部路径</code></pre><h3 id="6-重启-amp-启动-amp-停止-amp-删除容器"><a href="#6-重启-amp-启动-amp-停止-amp-删除容器" class="headerlink" title="6.重启&amp;启动&amp;停止&amp;删除容器"></a>6.重启&amp;启动&amp;停止&amp;删除容器</h3><pre class=" language-powershell"><code class="language-powershell">容器的启动，停止，删除等操作，后续会经常使用到<span class="token comment" spellcheck="true">#重新启动容器</span>docker restart 容器id<span class="token comment" spellcheck="true">#启动停止运行的容器</span>docker <span class="token function">start</span> 容器id<span class="token comment" spellcheck="true">#停止指定的容器(删除容器前，需要先停止容器)</span>docker stop 容器id<span class="token comment" spellcheck="true">#停止全部容器</span>docker stop $<span class="token punctuation">(</span>docker <span class="token function">ps</span> <span class="token operator">-</span>qa<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除指定容器</span>docker <span class="token function">rm</span> 容器id<span class="token comment" spellcheck="true">#删除全部容器</span>docker <span class="token function">rm</span> $<span class="token punctuation">(</span>docker <span class="token function">ps</span> <span class="token operator">-</span>qa<span class="token punctuation">)</span></code></pre><h2 id="五、Docker应用"><a href="#五、Docker应用" class="headerlink" title="五、Docker应用"></a>五、Docker应用</h2><h3 id="1-docker安装tomcat"><a href="#1-docker安装tomcat" class="headerlink" title="1.docker安装tomcat"></a>1.docker安装tomcat</h3><pre class=" language-powershell"><code class="language-powershell">运行Tomcat容器，为部署ssm工程做准备docker run <span class="token operator">-</span>d <span class="token operator">-</span>p 8080:8080 <span class="token operator">--</span>name tomcat  daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>library<span class="token operator">/</span>tomcat:8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>15<span class="token operator">-</span>jre8<span class="token comment" spellcheck="true">#或者已经下载了tomcat镜像</span>docker run <span class="token operator">-</span>d <span class="token operator">-</span>p 8080:8080 <span class="token operator">--</span>name tomcat 镜像的标识</code></pre><h3 id="2-运行MySQL容器"><a href="#2-运行MySQL容器" class="headerlink" title="2.运行MySQL容器"></a>2.运行MySQL容器</h3><pre class=" language-powershell"><code class="language-powershell">docker run <span class="token operator">-</span>d <span class="token operator">-</span>p 3306:3306 <span class="token operator">--</span>name mysql <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD=root daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>library<span class="token operator">/</span>mysql:5<span class="token punctuation">.</span>7<span class="token punctuation">.</span>4</code></pre><h3 id="3-部署ssm工程"><a href="#3-部署ssm工程" class="headerlink" title="3.部署ssm工程"></a>3.部署ssm工程</h3><pre class=" language-powershell"><code class="language-powershell">修改SSM工程环境，设置为Linux中Docker容器的信息通过Maven的package重新打成war包将Windows下的war包复制到Linux中通过docker命令将宿主机的war包复制到容器内部docker <span class="token function">cp</span> 文件名称 容器id:容器内部路径测试访问SSM工程</code></pre><h2 id="六、数据卷"><a href="#六、数据卷" class="headerlink" title="六、数据卷"></a>六、数据卷</h2><blockquote><p>为了部署SSM的工程，需要使用到cp的命令将宿主机内的ssm.war文件复制到容器内部。 数据卷：将宿主机的一个目录映射到容器的一个目录中。</p><p>可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。</p></blockquote><h3 id="1-创建数据卷"><a href="#1-创建数据卷" class="headerlink" title="1.创建数据卷"></a>1.创建数据卷</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#创建数据卷后，默认会存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data</span>docker volume create 数据卷名称</code></pre><h3 id="2-查看全部数据卷"><a href="#2-查看全部数据卷" class="headerlink" title="2.查看全部数据卷"></a>2.查看全部数据卷</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#查看全部数据卷信息</span>docker volume <span class="token function">ls</span></code></pre><h3 id="3-查看数据卷详情"><a href="#3-查看数据卷详情" class="headerlink" title="3.查看数据卷详情"></a>3.查看数据卷详情</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#查看数据卷的详细信息，可以查询到存放的路径，创建时间等等</span>docker volume inspect 数据卷名称</code></pre><h3 id="4-删除数据卷"><a href="#4-删除数据卷" class="headerlink" title="4.删除数据卷"></a>4.删除数据卷</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#删除指定的数据卷</span>docker volume <span class="token function">rm</span> 数据卷名称</code></pre><h3 id="5-容器映射数据卷"><a href="#5-容器映射数据卷" class="headerlink" title="5.容器映射数据卷"></a>5.容器映射数据卷</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#通过数据卷名称映射，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。</span>docker run <span class="token operator">-</span>d <span class="token operator">-</span>p 8080:8080 <span class="token operator">--</span>name tomcat <span class="token operator">-</span>v 数据卷名称:容器内部的路径 镜像id<span class="token comment" spellcheck="true">#通过路径映射数据卷，直接指定一个路径作为数据卷的存放位置。但是这个路径下是空的。</span>docker run <span class="token operator">-</span>d <span class="token operator">-</span>p 8080:8080 <span class="token operator">--</span>name tomcat <span class="token operator">-</span>v 路径<span class="token punctuation">(</span><span class="token operator">/</span>root<span class="token operator">/</span>自己创建的文件夹<span class="token punctuation">)</span>:容器内部的路径 镜像id</code></pre><h2 id="七、Dockerfile自定义镜像"><a href="#七、Dockerfile自定义镜像" class="headerlink" title="七、Dockerfile自定义镜像"></a>七、Dockerfile自定义镜像</h2><h3 id="1-Dockerfile"><a href="#1-Dockerfile" class="headerlink" title="1.Dockerfile"></a>1.Dockerfile</h3><pre class=" language-powershell"><code class="language-powershell">创建自定义镜像就需要创建一个Dockerfiler<span class="token punctuation">,</span>如下为Dockerfile的语言<span class="token keyword">from</span>：指定当前自定义镜像依赖的环境<span class="token function">copy</span>：将相对路径下的内容复制到自定义镜像中workdir：声明镜像的默认工作目录run：执行的命令，可以编写多个cmd：需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准）<span class="token comment" spellcheck="true">#示例：</span><span class="token keyword">from</span> daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>library<span class="token operator">/</span>tomcat:8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>15<span class="token operator">-</span>jre8<span class="token function">copy</span> ssm<span class="token punctuation">.</span>war <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>tomcat<span class="token operator">/</span>webapps</code></pre><h2 id="2-通过Dockerfile制作镜像"><a href="#2-通过Dockerfile制作镜像" class="headerlink" title="2.通过Dockerfile制作镜像"></a>2.通过Dockerfile制作镜像</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#编写完Dockerfile后需要通过命令将其制作为镜像，并且要在Dockerfile的当前目录下，之后即可在镜像中查看到指定的镜像信息，注意最后的 .</span>docker build <span class="token operator">-</span>t 镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token operator">/</span></code></pre><h2 id="八、Docker-Compose"><a href="#八、Docker-Compose" class="headerlink" title="八、Docker-Compose"></a>八、Docker-Compose</h2><h3 id="1-下载并安装Docker-Compose"><a href="#1-下载并安装Docker-Compose" class="headerlink" title="1.下载并安装Docker-Compose"></a>1.下载并安装Docker-Compose</h3><h4 id="1-1下载Docker-Compose"><a href="#1-1下载Docker-Compose" class="headerlink" title="1.1下载Docker-Compose"></a>1.1下载Docker-Compose</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#去github官网搜索docker-compose，下载1.24.1版本的Docker-Compose</span>下载路径：https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">/</span>compose<span class="token operator">/</span>releases<span class="token operator">/</span>download<span class="token operator">/</span>1<span class="token punctuation">.</span>24<span class="token punctuation">.</span>1<span class="token operator">/</span>docker<span class="token operator">-</span>compose<span class="token operator">-</span>Linux<span class="token operator">-</span>x86_64</code></pre><h4 id="1-2设置权限"><a href="#1-2设置权限" class="headerlink" title="1.2设置权限"></a>1.2设置权限</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#需要将DockerCompose文件的名称修改一下，给予DockerCompose文件一个可执行的权限</span><span class="token function">mv</span> docker<span class="token operator">-</span>compose<span class="token operator">-</span>Linux<span class="token operator">-</span>x86_64 docker<span class="token operator">-</span>composechmod 777 docker<span class="token operator">-</span>compose</code></pre><h4 id="1-3配置环境变量"><a href="#1-3配置环境变量" class="headerlink" title="1.3配置环境变量"></a>1.3配置环境变量</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#方便后期操作，配置一个环境变量</span><span class="token comment" spellcheck="true">#将docker-compose文件移动到了/usr/local/bin，修改了/etc/profile文件，给/usr/local/bin配置到了PATH中</span><span class="token function">mv</span> docker<span class="token operator">-</span>compose <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>binvi <span class="token operator">/</span>etc<span class="token operator">/</span>profile<span class="token comment" spellcheck="true">#添加内容：export PATH=$JAVA_HOME:/usr/local/bin:$PATH</span>source <span class="token operator">/</span>etc<span class="token operator">/</span>profile</code></pre><h4 id="1-4测试"><a href="#1-4测试" class="headerlink" title="1.4测试"></a>1.4测试</h4><pre class=" language-powershell"><code class="language-powershell">在任意目录下输入docker<span class="token operator">-</span>compose</code></pre><h3 id="2-Docker-Compose管理MySQL和Tomcat容器"><a href="#2-Docker-Compose管理MySQL和Tomcat容器" class="headerlink" title="2.Docker-Compose管理MySQL和Tomcat容器"></a>2.Docker-Compose管理MySQL和Tomcat容器</h3><pre class=" language-powershell"><code class="language-powershell">yml文件以key:value方式来指定配置信息多个配置信息以换行<span class="token operator">+</span>缩进的方式来区分在docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>yml文件中，不要使用制表符version: <span class="token string">'3.1'</span>services:  mysql:           <span class="token comment" spellcheck="true"># 服务的名称</span>    restart: always   <span class="token comment" spellcheck="true"># 代表只要docker启动，那么这个容器就跟着一起启动</span>    image: daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>library<span class="token operator">/</span>mysql:5<span class="token punctuation">.</span>7<span class="token punctuation">.</span>4  <span class="token comment" spellcheck="true"># 指定镜像路径</span>    container_name: mysql  <span class="token comment" spellcheck="true"># 指定容器名称</span>    ports:      <span class="token operator">-</span> 3306:3306   <span class="token comment" spellcheck="true">#  指定端口号的映射</span>    environment:      MYSQL_ROOT_PASSWORD: root   <span class="token comment" spellcheck="true"># 指定MySQL的ROOT用户登录密码</span>      TZ: Asia<span class="token operator">/</span>Shanghai        <span class="token comment" spellcheck="true"># 指定时区</span>    volumes:     <span class="token operator">-</span> <span class="token operator">/</span>opt<span class="token operator">/</span>docker_mysql_tomcat<span class="token operator">/</span>mysql_data:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql   <span class="token comment" spellcheck="true"># 映射数据卷</span>  tomcat:    restart: always    image: daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>library<span class="token operator">/</span>tomcat:8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>15<span class="token operator">-</span>jre8    container_name: tomcat    ports:      <span class="token operator">-</span> 8080:8080    environment:      TZ: Asia<span class="token operator">/</span>Shanghai    volumes:      <span class="token operator">-</span> <span class="token operator">/</span>opt<span class="token operator">/</span>docker_mysql_tomcat<span class="token operator">/</span>tomcat_webapps:<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>tomcat<span class="token operator">/</span>webapps      <span class="token operator">-</span> <span class="token operator">/</span>opt<span class="token operator">/</span>docker_mysql_tomcat<span class="token operator">/</span>tomcat_logs:<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>tomcat<span class="token operator">/</span>logs</code></pre><h3 id="3-使用docker-compose命令管理容器"><a href="#3-使用docker-compose命令管理容器" class="headerlink" title="3.使用docker-compose命令管理容器"></a>3.使用docker-compose命令管理容器</h3><pre class=" language-powershell"><code class="language-powershell">在使用docker<span class="token operator">-</span>compose的命令时，默认会在当前目录下找docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>yml文件<span class="token comment" spellcheck="true">#1.基于docker-compose.yml启动管理的容器</span>docker<span class="token operator">-</span>compose up <span class="token operator">-</span>d<span class="token comment" spellcheck="true">#2.关闭并删除容器</span>docker<span class="token operator">-</span>compose down<span class="token comment" spellcheck="true">#3.开启|关闭|重启已经存在的由docker-compose维护的容器</span>docker<span class="token operator">-</span>compose <span class="token function">start</span><span class="token punctuation">|</span>stop<span class="token punctuation">|</span>restart<span class="token comment" spellcheck="true">#4.查看由docker-compose管理的容器</span>docker<span class="token operator">-</span>compose <span class="token function">ps</span><span class="token comment" spellcheck="true">#5.查看日志</span>docker<span class="token operator">-</span>compose logs <span class="token operator">-</span>f</code></pre><h3 id="4-docker-compose配合Dockerfile使用"><a href="#4-docker-compose配合Dockerfile使用" class="headerlink" title="4.docker-compose配合Dockerfile使用"></a>4.docker-compose配合Dockerfile使用</h3><blockquote><p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p></blockquote><h4 id="4-1docker-compose文件"><a href="#4-1docker-compose文件" class="headerlink" title="4.1docker-compose文件"></a>4.1docker-compose文件</h4><pre class=" language-powershell"><code class="language-powershell">编写docker<span class="token operator">-</span>compose文件<span class="token comment" spellcheck="true"># yml文件</span>version: <span class="token string">'3.1'</span>services:  ssm:    restart: always    build:            <span class="token comment" spellcheck="true"># 构建自定义镜像</span>      context: <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>      <span class="token comment" spellcheck="true"># 指定dockerfile文件的所在路径</span>      dockerfile: Dockerfile   <span class="token comment" spellcheck="true"># 指定Dockerfile文件名称</span>    image: ssm:1<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1    container_name: ssm    ports:      <span class="token operator">-</span> 8081:8080    environment:      TZ: Asia<span class="token operator">/</span>Shanghai</code></pre><h4 id="4-2-Dockerfile文件"><a href="#4-2-Dockerfile文件" class="headerlink" title="4.2 Dockerfile文件"></a>4.2 Dockerfile文件</h4><pre class=" language-powershell"><code class="language-powershell">编写Dockerfile文件<span class="token keyword">from</span> daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>library<span class="token operator">/</span>tomcat:8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>15<span class="token operator">-</span>jre8<span class="token function">copy</span> ssm<span class="token punctuation">.</span>war <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>tomcat<span class="token operator">/</span>webapps</code></pre><h4 id="4-3-运行"><a href="#4-3-运行" class="headerlink" title="4.3 运行"></a>4.3 运行</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#可以直接基于docker-compose.yml以及Dockerfile文件构建的自定义镜像</span>docker<span class="token operator">-</span>compose up <span class="token operator">-</span>d<span class="token comment" spellcheck="true"># 如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像</span><span class="token comment" spellcheck="true">#重新构建自定义镜像</span>docker<span class="token operator">-</span>compose build<span class="token comment" spellcheck="true">#运行当前内容，并重新构建</span>docker<span class="token operator">-</span>compose up <span class="token operator">-</span>d <span class="token operator">--</span>build</code></pre><h2 id="九、CI、CD介绍及准备"><a href="#九、CI、CD介绍及准备" class="headerlink" title="九、CI、CD介绍及准备"></a>九、CI、CD介绍及准备</h2><h3 id="1-CI、CD引言"><a href="#1-CI、CD引言" class="headerlink" title="1.CI、CD引言"></a>1.CI、CD引言</h3><blockquote><p>项目部署<br>1.将项目通过maven进行编译打包<br>2.将文件上传到指定的服务器中<br>3.将war包放到tomcat的目录中<br>4.通过Dockerfile将Tomcat和war包转成一个镜像，由DockerCompose去运行容器 项目更新后，需要将上述流程再次的从头到尾的执行一次，如果每次更新一次都执行一次上述操作，很费时，费力。我们就可以通过CI、CD帮助我们实现持续集成，持续交付和部署</p></blockquote><h3 id="2-CI介绍"><a href="#2-CI介绍" class="headerlink" title="2.CI介绍"></a>2.CI介绍</h3><blockquote><p>CI（continuous intergration）持续集成<br>持续集成：编写代码时，完成了一个功能后，立即提交代码到Git仓库中，将项目重新的构建并且测试。<br>1.快速发现错误。<br>2.防止代码偏离主分支。</p></blockquote><h3 id="3-搭建Gitlab服务器"><a href="#3-搭建Gitlab服务器" class="headerlink" title="3.搭建Gitlab服务器"></a>3.搭建Gitlab服务器</h3><h4 id="3-1-准备环境"><a href="#3-1-准备环境" class="headerlink" title="3.1.准备环境"></a>3.1.准备环境</h4><p>实现CI，需要使用到Gitlab远程仓库，先通过Docker搭建Gitlab</p><blockquote><p>创建一个全新的虚拟机，并且至少指定4G的运行内存，4G运行内存是Gitlab推荐的内存大小。<br>并且安装Docker以及Docker-Compose</p></blockquote><h4 id="3-2-修改ssh的22端口"><a href="#3-2-修改ssh的22端口" class="headerlink" title="3.2 修改ssh的22端口"></a>3.2 修改ssh的22端口</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#将ssh的默认22端口，修改为60022端口，因为Gitlab需要占用22端口</span>vi <span class="token operator">/</span>etc<span class="token operator">/</span>ssh<span class="token operator">/</span>sshd_config  PORT 22 <span class="token operator">-</span>> 60022systemctl restart sshd</code></pre><h4 id="3-3-编写docker-compose-yml"><a href="#3-3-编写docker-compose-yml" class="headerlink" title="3.3 编写docker-compose.yml"></a>3.3 编写docker-compose.yml</h4><pre class=" language-powershell"><code class="language-powershell">docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>yml文件去安装gitlab（下载和运行的时间比较长的）version: <span class="token string">'3.1'</span>services: gitlab:  image: <span class="token string">'twang2218/gitlab-ce-zh:11.1.4'</span>  container_name: <span class="token string">"gitlab"</span>  restart: always  privileged: true  hostname: <span class="token string">'gitlab'</span>  environment:   TZ: <span class="token string">'Asia/Shanghai'</span>   GITLAB_OMNIBUS_CONFIG: <span class="token punctuation">|</span>    external_url <span class="token string">'http://192.168.199.110'</span>    gitlab_rails<span class="token punctuation">[</span><span class="token string">'time_zone'</span><span class="token punctuation">]</span> = <span class="token string">'Asia/Shanghai'</span>    gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable'</span><span class="token punctuation">]</span> = true    gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_shell_ssh_port'</span><span class="token punctuation">]</span> = 22  ports:   <span class="token operator">-</span> <span class="token string">'80:80'</span>   <span class="token operator">-</span> <span class="token string">'443:443'</span>   <span class="token operator">-</span> <span class="token string">'22:22'</span>  volumes:   <span class="token operator">-</span> <span class="token operator">/</span>opt<span class="token operator">/</span>docker_gitlab<span class="token operator">/</span>config:<span class="token operator">/</span>etc<span class="token operator">/</span>gitlab   <span class="token operator">-</span> <span class="token operator">/</span>opt<span class="token operator">/</span>docker_gitlab<span class="token operator">/</span><span class="token keyword">data</span>:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>opt<span class="token operator">/</span>gitlab   <span class="token operator">-</span> <span class="token operator">/</span>opt<span class="token operator">/</span>docker_gitlab<span class="token operator">/</span>logs:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>gitlab</code></pre><h2 id="十、搭建GitlabRunner"><a href="#十、搭建GitlabRunner" class="headerlink" title="十、搭建GitlabRunner"></a>十、搭建GitlabRunner</h2><h3 id="1-准备文件"><a href="#1-准备文件" class="headerlink" title="1.准备文件"></a>1.准备文件</h3><pre class=" language-powershell"><code class="language-powershell">daemon<span class="token punctuation">.</span>json&amp;<span class="token comment" spellcheck="true">#123;</span>“registry<span class="token operator">-</span>mirrors”: <span class="token punctuation">[</span>“https:<span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>docker<span class="token operator">-</span>cn<span class="token punctuation">.</span>com”<span class="token punctuation">]</span><span class="token punctuation">,</span>“insecure<span class="token operator">-</span>registries”: <span class="token namespace">[ip:ports]</span>&amp;<span class="token comment" spellcheck="true">#125;</span>文件夹 environment里面准备maven安装包，jdk1<span class="token punctuation">.</span>8安装包，Dockerfile，daemon<span class="token punctuation">.</span>json以及docker<span class="token operator">-</span>compose</code></pre><h3 id="2-开始搭建"><a href="#2-开始搭建" class="headerlink" title="2.开始搭建"></a>2.开始搭建</h3><blockquote><p>创建工作目录 /usr/local/docker_gitlab-runner<br>将docker-compose.yml文件以及environment目录全部复制到上述目录中 在宿主机启动docker程序后先执行 sudo<br>chown root:root /var/run/docker.sock (如果重启过 docker,重新执行)<br>在/usr/local/docker_gitlab-runner 目录中执行docker-compose up -d –build 启动容器<br>添加容器权限，保证容器可以使用宿主机的dockerdocker exec -it gitlab-runner usermod -aG<br>root gitlab-runner 注册Runner信息到gitlab</p></blockquote><h3 id="3-进入后续步骤"><a href="#3-进入后续步骤" class="headerlink" title="3.进入后续步骤"></a>3.进入后续步骤</h3><pre class=" language-powershell"><code class="language-powershell">docker exec <span class="token operator">-</span>it gitlab<span class="token operator">-</span>runner gitlab<span class="token operator">-</span>runner register<span class="token comment" spellcheck="true"># 输入 GitLab 地址</span>Please enter the gitlab<span class="token operator">-</span>ci coordinator URL <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> https:<span class="token operator">/</span><span class="token operator">/</span>gitlab<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token punctuation">)</span>:http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>199<span class="token punctuation">.</span>109<span class="token operator">/</span><span class="token comment" spellcheck="true"># 输入 GitLab Token</span>Please enter the gitlab<span class="token operator">-</span>ci token <span class="token keyword">for</span> this runner:1Lxq_f1NRfCfeNbE5WRh<span class="token comment" spellcheck="true"># 输入 Runner 的说明</span>Please enter the gitlab<span class="token operator">-</span>ci description <span class="token keyword">for</span> this runner:可以为空<span class="token comment" spellcheck="true"># 设置 Tag，可以用于指定在构建规定的 tag 时触发 ci</span>Please enter the gitlab<span class="token operator">-</span>ci tags <span class="token keyword">for</span> this runner <span class="token punctuation">(</span>comma separated<span class="token punctuation">)</span>:deploy<span class="token comment" spellcheck="true"># 这里选择 true ，可以用于代码上传后直接执行（根据版本，也会没有次选项）</span>Whether to run untagged builds <span class="token namespace">[true/false]</span>:true<span class="token comment" spellcheck="true"># 这里选择 false，可以直接回车，默认为 false（根据版本，也会没有次选项）</span>Whether to lock Runner to current project <span class="token namespace">[true/false]</span>:false<span class="token comment" spellcheck="true"># 选择 runner 执行器，这里我们选择的是 shell</span>Please enter the executor: virtualbox<span class="token punctuation">,</span> docker<span class="token operator">+</span>machine<span class="token punctuation">,</span> parallels<span class="token punctuation">,</span> shell<span class="token punctuation">,</span> ssh<span class="token punctuation">,</span> docker<span class="token operator">-</span>ssh<span class="token operator">+</span>machine<span class="token punctuation">,</span> kubernetes<span class="token punctuation">,</span> docker<span class="token punctuation">,</span> docker<span class="token operator">-</span>ssh:shell</code></pre><h2 id="十一、整合项目入门测试"><a href="#十一、整合项目入门测试" class="headerlink" title="十一、整合项目入门测试"></a>十一、整合项目入门测试</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><blockquote><p>创建maven工程，添加web.xml文件，编写HTML页面</p></blockquote><h3 id="2-编写-gitlab-ci-yml文件"><a href="#2-编写-gitlab-ci-yml文件" class="headerlink" title="2.编写.gitlab-ci.yml文件"></a>2.编写.gitlab-ci.yml文件</h3><pre class=" language-powershell"><code class="language-powershell">stages:  <span class="token operator">-</span> testtest:  stage: test  script:    <span class="token operator">-</span> <span class="token function">echo</span> first test ci   <span class="token comment" spellcheck="true"># 输入的命令</span></code></pre><h3 id="3-将maven工程推送到gitlab中"><a href="#3-将maven工程推送到gitlab中" class="headerlink" title="3.将maven工程推送到gitlab中"></a>3.将maven工程推送到gitlab中</h3><pre class=" language-powershell"><code class="language-powershell">执行git命令推送到Gitlabgit push origin master</code></pre><h3 id="4-查看效果"><a href="#4-查看效果" class="headerlink" title="4.查看效果"></a>4.查看效果</h3><blockquote><p>可以在gitlab中查看到gitlab-ci.yml编写的内容</p></blockquote><h2 id="十二、完善项目配置"><a href="#十二、完善项目配置" class="headerlink" title="十二、完善项目配置"></a>十二、完善项目配置</h2><blockquote><p>添加Dockerfile以及docker-compose.yml， 并修改.gitlab-ci.yml文件</p></blockquote><h3 id="1-创建Dockerfile"><a href="#1-创建Dockerfile" class="headerlink" title="1.创建Dockerfile"></a>1.创建Dockerfile</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># Dockerfile</span><span class="token keyword">FROM</span> daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>library<span class="token operator">/</span>tomcat:8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>15<span class="token operator">-</span>jre8<span class="token function">COPY</span> testci<span class="token punctuation">.</span>war <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>tomcat<span class="token operator">/</span>webapps</code></pre><h3 id="2-创建docker-compose-yml"><a href="#2-创建docker-compose-yml" class="headerlink" title="2.创建docker-compose.yml"></a>2.创建docker-compose.yml</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># docker-compose.yml</span>version: <span class="token string">"3.1"</span>services:  testci:    build: docker    restart: always    container_name: testci    ports:      <span class="token operator">-</span> 8080:8080</code></pre><h3 id="3-修改-gitlab-ci-yml"><a href="#3-修改-gitlab-ci-yml" class="headerlink" title="3.修改.gitlab-ci.yml"></a>3.修改.gitlab-ci.yml</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># ci.yml</span>stages:  <span class="token operator">-</span> testtest:  stage: test  script:    <span class="token operator">-</span> <span class="token function">echo</span> first test ci    <span class="token operator">-</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>maven<span class="token operator">/</span>apache<span class="token operator">-</span>maven<span class="token operator">-</span>3<span class="token punctuation">.</span>6<span class="token punctuation">.</span>3<span class="token operator">/</span>bin<span class="token operator">/</span>mvn package    <span class="token operator">-</span> <span class="token function">cp</span> target<span class="token operator">/</span>testci<span class="token operator">-</span>1<span class="token punctuation">.</span>0<span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>war docker<span class="token operator">/</span>testci<span class="token punctuation">.</span>war    <span class="token operator">-</span> docker<span class="token operator">-</span>compose down    <span class="token operator">-</span> docker<span class="token operator">-</span>compose up <span class="token operator">-</span>d <span class="token operator">--</span>build    <span class="token operator">-</span> docker rmi $<span class="token punctuation">(</span>docker images <span class="token operator">-</span>qf dangling=true<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux运维教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/3eeb.html"/>
      <url>/post/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>hexo clean</p><p>hexo g</p><p>hexo d</p><p>hexo s</p>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> INIT </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
